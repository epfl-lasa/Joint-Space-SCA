# A description of the CVXGEN problem (icub SCA).

dimensions
  N = 38 # variables
  M = 36 # tasks

  nB = 6
  nT = 3
  nH = 3
  nLL = 6
  nRL = 6
  nLH = 7
  nRH = 7

  #sca_submodel sizes
  d1 = 14
  d2 = 16
  d3 = 16
  d4 = 10
  d5 = 16
  d6 = 16
  d7 = 10
  d8 = 12
  d9 = 9
  d10 = 9

  #salman dims
  iB = 0
  iT = 6
  iH = 9
  iLL = 12
  iRL = 18
  iLH = 24
  iRH = 31

  cCMp = 0
  cCMo = 3
  cLLp = 6
  cLLo = 9
  cRLp = 12
  cRLo = 15
  cLHp = 18
  cLHo = 21
  cRHp = 24
  cRHo = 27
  cTOo = 30
  cHDo = 33
end

parameters
  damping (N) nonnegative
  slack (M) nonnegative
  J[i] (M),i=1..N
  dx (M)
  hard (M)
  qlow (N-6)
  qup (N-6)
  qref (N)
  qmin (N-6)
  qmax (N-6)
  #svm_1, l_arm + r_arm, 14 DoF
  svm_val_1 (1)
  svm_vec_1 (d1)
  #svm_2, l_arm + l_leg, 14 DoF
  svm_val_2 (1)
  svm_vec_2 (d2)
  #svm_3
  svm_val_3 (1)
  svm_vec_3 (d3)
  #svm_4
  svm_val_4 (1)
  svm_vec_4 (d4)
  #svm_5
  svm_val_5 (1)
  svm_vec_5 (d5)
  #svm_6
  svm_val_6 (1)
  svm_vec_6 (d6)
  #svm_7
  svm_val_7 (1)
  svm_vec_7 (d7)
  #svm_8
  svm_val_8 (1)
  svm_vec_8 (d8)
  #svm_9
  svm_val_9 (1)
  svm_vec_9 (d9)
  #svm_10
  svm_val_10 (1)
  svm_vec_10 (d10)
end

variables
  dq (N)
  delta (M)
  sca_slack (10)
end

minimize
  damping'*square(dq+qref) + slack'*square(delta)

subject to
  #sum[i=1..N](J[i][j]*dq[i]) == dx[j] + delta[j]*(hard[j]), j=1..M
  sum[i=iB+1..iB+N](    J[i][j] * dq[i])                                          == dx[j] + (1-hard[j])*delta[j] ,j=cCMp+1..cCMp+3
  sum[i=iB+4..iB+nB](   J[i][j] * dq[i])                                          == dx[j] + (1-hard[j])*delta[j] ,j=cCMo+1..cCMo+3
  sum[i=iB+1..iB+nB](   J[i][j] * dq[i]) + sum[i=iLL+1..iLL+nLL](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cLLp+1..cLLp+3
  sum[i=iB+4..iB+nB](   J[i][j] * dq[i]) + sum[i=iLL+1..iLL+nLL](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cLLo+1..cLLo+3
  sum[i=iB+1..iB+nB](   J[i][j] * dq[i]) + sum[i=iRL+1..iRL+nRL](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cRLp+1..cRLp+3
  sum[i=iB+4..iB+nB](   J[i][j] * dq[i]) + sum[i=iRL+1..iRL+nRL](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cRLo+1..cRLo+3
  sum[i=iB+1..iB+nB+nT](J[i][j] * dq[i]) + sum[i=iLH+1..iLH+nLH](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cLHp+1..cLHp+3
  sum[i=iB+4..iB+nB+nT](J[i][j] * dq[i]) + sum[i=iLH+1..iLH+nLH](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cLHo+1..cLHo+3
  sum[i=iB+1..iB+nB+nT](J[i][j] * dq[i]) + sum[i=iRH+1..iRH+nRH](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cRHp+1..cRHp+3
  sum[i=iB+4..iB+nB+nT](J[i][j] * dq[i]) + sum[i=iRH+1..iRH+nRH](J[i][j] * dq[i]) == dx[j] + (1-hard[j])*delta[j] ,j=cRHo+1..cRHo+3
  sum[i=iB+4..iB+nB+nT](J[i][j] * dq[i])                                          == dx[j] + (1-hard[j])*delta[j] ,j=cTOo+1..cTOo+3
  sum[i=iB+4..iB+nB+nT+nH](J[i][j] * dq[i])                                       == dx[j] + (1-hard[j])*delta[j] ,j=cHDo+1..cHDo+3
  #joint limits
  qlow[j] <= dq[j+6] <= qup[j], j=1..N-6

  #SCA_block
  #N1, arms, joint idx = [24 25 26 27 28 29 30 31 32 33 34 35 36 37]
  #svm_vec 1..14     qmin,qmax 1..32  dq 1..38      svm_val 1
  #svm_vec_1[j-23] * (qmin[j-6] + (qmax[j-6] - qmin[j-6]) * dq[j]) <= svm_val_1 ,j=24..37
  sum[j=24+1..37+1](svm_vec_1[j-24] * ((1/(qmax[j-6] - qmin[j-6]) * dq[j]))) <= svm_val_1

  #N2, l_arm+l_leg, idx = [6 7 8 12 13 14 15 16 17 24 25 26 27 28 29 30]
  sum[j=7..9](svm_vec_2[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=13..18](svm_vec_2[j-12+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=25..31](svm_vec_2[j-24+3+6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j]))<= svm_val_2

  #N3, l_arm+r_leg, idx = [6 7 8 18 19 20 21 22 23 24 25 26 27 28 29 30]
  sum[j=7..9](svm_vec_3[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=19..24](svm_vec_3[j-18+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=25..31](svm_vec_3[j-24+3+6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j]))<= svm_val_3

  #N4, l_arm+torso, idx = [6 7 8 24 25 26 27 28 29 30]
  sum[j=7..9](svm_vec_4[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=25..31](svm_vec_4[j-24+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j]))<= svm_val_4

  #N5, r_arm+l_leg, idx = [6 7 8 12 13 14 15 16 17 31 32 33 34 35 36 37]
  sum[j=7..9](svm_vec_5[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=13..18](svm_vec_5[j-12+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=32..38](svm_vec_5[j-31+3+6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j]))<= svm_val_5

  #N6, r_arm+r_leg, idx = [6 7 8 18 19 20 21 22 23 31 32 33 34 35 36 37]
  sum[j=7..9](svm_vec_6[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=19..24](svm_vec_6[j-18+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=32..38](svm_vec_6[j-31+3+6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j]))<= svm_val_6

  #N7, r_arm+torso, idx = [6 7 8 31 32 33 34 35 36 37]
  sum[j=7..9](svm_vec_7[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=32..38](svm_vec_7[j-31+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j]))<= svm_val_7

  #N8, l_leg+r_leg, idx = [12 13 14 15 16 17 18 19 20 21 22 23]
  sum[j=13..18](svm_vec_8[j-12] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=19..24](svm_vec_8[j-18+6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) <= svm_val_8

  #N9, l_leg+torso, idx = [6 7 8 12 13 14 15 16 17]
  sum[j=7..9](svm_vec_9[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=13..18](svm_vec_9[j-12+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j]))  <= svm_val_9

  #N10, r_leg+torso, idx = [6 7 8 18 19 20 21 22 23]
  sum[j=7..9](svm_vec_10[j-6] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) + sum[j=19..24](svm_vec_10[j-18+3] * (1/(qmax[j-6] - qmin[j-6]) * dq[j])) <= svm_val_10


end
